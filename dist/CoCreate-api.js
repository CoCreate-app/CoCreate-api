/*! For license information please see CoCreate-api.js.LICENSE.txt */
!function(Q,F){"object"==typeof exports&&"object"==typeof module?module.exports=F():"function"==typeof define&&define.amd?define([],F):"object"==typeof exports?exports.CoCreate=F():(Q.CoCreate=Q.CoCreate||{},Q.CoCreate.api=F())}(this,(function(){return(()=>{"use strict";var __webpack_modules__={"../CoCreate-action/src/index.js":(__unused_webpack_module,exports)=>{eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n// -testing1\nconst CoCreateAction = {\n  attribute: 'data-actions',\n  actions: {},\n  selectedStage: [],\n  stageIndex: 0,\n  selectedElement: null,\n  completedEventName: 'completedEvent',\n  __init: function () {\n    this.actionButtonEvent();\n  },\n  actionButtonEvent: function () {\n    const self = this;\n    document.addEventListener('click', function (event) {\n      let btn = event.target;\n\n      if (!btn.getAttribute('data-actions')) {\n        btn = event.target.closest('[data-actions]');\n      }\n\n      if (!btn) return;\n      event.preventDefault();\n      let actions = (btn.getAttribute(self.attribute) || \"\").replace(/\\s/g, '').split(',');\n      if (actions.length == 0) return;\n      self.stageIndex = 0;\n      self.selectedStage = actions; //. run function\n\n      self.selectedElement = btn;\n\n      self.__runActionFunc();\n    });\n  },\n  init: function ({\n    action,\n    callback,\n    endEvent\n  }) {\n    this.registerEvent(action, callback, null, endEvent);\n  },\n\n  /**\n   * key: string\n   * runFunc: function\n   * instance: object\n   * endEvent: string\n   **/\n  registerEvent: function (key, runFunc, instance, endEvent) {\n    if (this.actions[key]) {\n      return;\n    }\n\n    this.actions[key] = {\n      key: key,\n      runFunc: runFunc,\n      instance: instance || window,\n      endEvent: endEvent\n    }; //. register events\n\n    for (let __key in this.actions) {\n      if (__key != key && this.actions[__key]['endEvent'] === endEvent) {\n        return;\n      }\n    } //. register events\n\n\n    const _this = this;\n\n    document.addEventListener(endEvent, function (e) {\n      _this.__nextAction(endEvent, e.detail);\n    });\n  },\n  __runActionFunc: function (data) {\n    if (this.stageIndex >= this.selectedStage.length) {\n      //. if latest case, it will be run aTag\n      if (this.stageIndex == this.selectedStage.length) {\n        this.__runAtag(this.selectedElement);\n      }\n\n      return;\n    }\n\n    const actionName = this.selectedStage[this.stageIndex]; //. run function\n\n    const action = this.actions[actionName];\n\n    if (action) {\n      if (action.runFunc) {\n        action.runFunc.call(null, this.selectedElement, data);\n      } else {\n        this.__nextAction(action.endEvent, {});\n      }\n    } else {\n      let status = this.__runSpecialAction(actionName, data);\n\n      if (status === \"next\") {\n        this.__moveNextAction();\n      }\n    }\n  },\n  __nextAction: function (eventName, data) {\n    const key = this.selectedStage[this.stageIndex];\n\n    if (!key) {\n      return;\n    }\n\n    if (eventName !== this.actions[key].endEvent) {\n      return;\n    }\n\n    this.__moveNextAction(data);\n  },\n  __runAtag: function (button) {\n    var aTag = button.querySelector('a');\n\n    if (aTag) {// CoCreate.logic.setLinkProcess(aTag)\n    }\n  },\n  //. special action\n  __runSpecialAction: function (actionName, data) {\n    let matches = /(\\w+)\\{([a-zA-Z0-9_ \\-#$.]+)\\}/gm.exec(actionName);\n\n    if (!matches || matches.length < 3) {\n      return \"next\";\n    }\n\n    let type = matches[1],\n        param = matches[2].trim();\n    if (!param) return \"next\";\n    const self = this;\n\n    switch (type) {\n      case 'event':\n        console.log(\"Waiting Event....\");\n        document.addEventListener(param, eventData => {\n          console.log('Event Action (Received event from other section) ====== ' + param);\n\n          self.__moveNextAction(eventData);\n        }, {\n          once: true\n        });\n        break;\n\n      case 'timeout':\n        let delayTime = parseInt(param);\n\n        if (delayTime > 0) {\n          setTimeout(function () {\n            console.log(\"Timeout ======= \" + param);\n\n            self.__moveNextAction(data);\n          }, parseInt(param));\n        }\n\n        break;\n\n      case 'action':\n        let btn = document.querySelector(param);\n\n        if (btn) {\n          btn.click();\n        }\n\n        break;\n\n      default:\n        return \"next\";\n    }\n  },\n  __moveNextAction: function (data) {\n    this.stageIndex++;\n\n    this.__runActionFunc(data);\n  }\n};\n\nCoCreateAction.__init();\n\nvar _default = CoCreateAction;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../CoCreate-action/src/index.js\n")},"./src/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.default = void 0;\n\nvar _socket = _interopRequireDefault(__webpack_require__(/*! @cocreate/socket */ "../CoCreate-socket/src/index.js"));\n\nvar _action = _interopRequireDefault(__webpack_require__(/*! @cocreate/action */ "../CoCreate-action/src/index.js"));\n\nvar _render = _interopRequireDefault(__webpack_require__(/*! @cocreate/render */ "../CoCreate-render/src/index.js"));\n\nvar _api = _interopRequireDefault(__webpack_require__(/*! @cocreate/api */ "./src/index.js"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst CoCreateApi = {\n  modules: {},\n  init: function ({\n    name,\n    module\n  }) {\n    this.register(name, module);\n  },\n  register: function (name, m_instance) {\n    const self = this;\n\n    if (typeof this.modules[name] === \'undefined\') {\n      this.modules[name] = m_instance;\n      socketApi.listen(name, data => {\n        self.__responseProcess(name, data);\n      }); //. register actions\n\n      if (Array.isArray(m_instance[\'actions\'])) {\n        m_instance[\'actions\'].forEach(action => {\n          if (typeof m_instance[`action_${action}`] !== \'function\') {\n            m_instance[`action_${action}`] = function (element) {\n              self.__commonAction(m_instance.id, action, element);\n            };\n          }\n\n          _action.default.init({\n            action: action,\n            endEvent: action,\n            callback: btn => {\n              m_instance[`action_${action}`](btn);\n            }\n          });\n        });\n      }\n    }\n  },\n  __responseProcess: function (m_name, data) {\n    const {\n      type,\n      response\n    } = data;\n    const m_instance = this.modules[m_name];\n\n    if (type && response && m_instance) {\n      if (typeof m_instance[`render_${type}`] === \'function\') {\n        m_instance[`render_${type}`](response);\n      }\n\n      this.render(type, response);\n      document.dispatchEvent(new CustomEvent(type, {\n        detail: {\n          data: response\n        }\n      }));\n    }\n  },\n  __commonAction: function (id, action, element) {\n    const container = element.closest("form") || document;\n    let data = CoCreateApi.getFormData(id, action, container);\n    CoCreateApi.send(id, action, data);\n  },\n  getFormData: function (m_name, action, container) {\n    const mainAttr = `data-${m_name}`;\n    const self = this;\n    const elements = container.querySelectorAll(`[${mainAttr}^="${action}."]`);\n    let data = {};\n    elements.forEach(element => {\n      let name = element.getAttribute(mainAttr);\n      let array_name = element.getAttribute(mainAttr + "_array");\n\n      let value = self.__getElValue(element);\n\n      if (!name) return;\n\n      if (action) {\n        let re = new RegExp(`^${action}.`, \'i\');\n\n        if (re.test(name)) {\n          name = name.replace(re, "");\n        } else {\n          return;\n        }\n      }\n\n      if (array_name) {\n        if (!data[name]) {\n          data[name] = [];\n        }\n\n        data[name].push(self.getFormData(m_name, array_name, element));\n      } else if (value != null) {\n        data[name] = value;\n      }\n    });\n    let keys = Object.keys(data);\n    let objectData = {};\n    keys.forEach(k => {\n      if (k.split(\'.\').length > 1) {\n        let newData = self.__createObject(data[k], k);\n\n        delete data[k];\n        objectData = self.__mergeObject(objectData, newData);\n      } else {\n        objectData[k] = data[k];\n      }\n    });\n    return objectData;\n  },\n  __getElValue: function (element) {\n    let value = null;\n\n    if (typeof element.value !== "undefined") {\n      switch (element.type.toLocaleLowerCase()) {\n        case \'checkbox\':\n          if (element.checked) {\n            value = element.value;\n          }\n\n          break;\n\n        default:\n          value = element.value;\n          break;\n      }\n    } else {\n      value = element.getAttribute(\'value\');\n\n      if (!value) {\n        value = element.innerHTML;\n      }\n    }\n\n    return value;\n  },\n  __mergeObject: function (target, source) {\n    target = target || {};\n\n    for (let key of Object.keys(source)) {\n      if (source[key] instanceof Object) {\n        Object.assign(source[key], this.__mergeObject(target[key], source[key]));\n      }\n    }\n\n    Object.assign(target || {}, source);\n    return target;\n  },\n  __createObject: function (data, path) {\n    if (!path) return data;\n    let keys = path.split(\'.\');\n    let newObject = data;\n\n    for (var i = keys.length - 1; i >= 0; i--) {\n      newObject = {\n        [keys[i]]: newObject\n      };\n    }\n\n    return newObject;\n  },\n  send: function (module, action, data) {\n    let request_data = this.getCommonParamsExtend(data || {});\n    request_data = { ...request_data,\n      data\n    };\n    socketApi.send(module, {\n      type: action,\n      data: request_data\n    });\n  },\n  render: function (action, data) {\n    _render.default.data({\n      selector: `[data-template_id="${action}"]`,\n      data: data\n    });\n  },\n  createApiSocket: function (host, namespace) {\n    if (namespace) {\n      socketApi.create({\n        namespace: namespace,\n        room: null,\n        host: host\n      });\n      socketApi.setGlobalScope(namespace);\n    } else {\n      socketApi.create({\n        namespace: null,\n        room: null,\n        host: host\n      });\n    }\n  },\n  getCommonParamsExtend: function (info) {\n    return {\n      "apiKey": info.apiKey || config.apiKey,\n      "securityKey": info.securityKey || config.securityKey,\n      "organization_id": info.organization_id || config.organization_Id\n    };\n  }\n};\n\n_api.default.init({\n  name: CoCreateApi.id,\n  module: CoCreateApi\n});\n\nvar _default = CoCreateApi;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.js\n')},"../CoCreate-render/src/index.js":(__unused_webpack_module,exports)=>{eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\n/**\n * change name Class\n * add functionality to add value on any attr of each elements into template\n */\nconst CoCreateRender = {\n  __getValueFromObject: function (json, path) {\n    try {\n      if (typeof json == 'undefined' || !path) return false;\n      let jsonData = json,\n          subpath = path.split('.');\n\n      for (let i = 0; i < subpath.length; i++) {\n        jsonData = jsonData[subpath[i]];\n        if (!jsonData) return false;\n      }\n\n      return jsonData;\n    } catch (error) {\n      console.log(\"Error in getValueFromObject\", error);\n      return false;\n    }\n  },\n  __getValue: function (data, attrValue) {\n    let result = /{{\\s*([\\w\\W]+)\\s*}}/g.exec(attrValue);\n\n    if (result) {\n      return this.__getValueFromObject(data, result[1].trim());\n    }\n\n    return false;\n  },\n  __createObject: function (data, path) {\n    try {\n      if (!path) return data;\n      let keys = path.split('.');\n      let newObject = data;\n\n      for (var i = keys.length - 1; i >= 0; i--) {\n        newObject = {\n          [keys[i]]: newObject\n        };\n      }\n\n      return newObject;\n    } catch (error) {\n      console.log(\"Error in getValueFromObject\", error);\n      return false;\n    }\n  },\n  __replaceValue: function (data, inputValue) {\n    let isPass = false;\n    let self = this;\n    let resultValue = null; // let variables = inputValue.match(/{{\\s*(\\S+)\\s*}}/g);\n\n    let variables = inputValue.match(/{{([A-Za-z0-9_.,\\- ]*)}}/g);\n\n    if (variables) {\n      variables.forEach(attr => {\n        let value = self.__getValue(data, attr);\n\n        if (value && typeof value !== \"object\") {\n          isPass = true;\n          inputValue = inputValue.replace(attr, value);\n        }\n      });\n\n      if (isPass) {\n        resultValue = inputValue;\n      }\n    }\n\n    return resultValue;\n  },\n  setArray: function (template, data) {\n    const type = template.getAttribute('data-render_array') || \"data\";\n    const render_key = template.getAttribute('data-render_key') || type;\n    const self = this;\n\n    const arrayData = this.__getValueFromObject(data, type);\n\n    if (type && Array.isArray(arrayData)) {\n      arrayData.forEach((item, index) => {\n        let cloneEl = template.cloneNode(true);\n        cloneEl.classList.remove('template');\n        cloneEl.classList.add('clone_' + type);\n\n        if (typeof item !== 'object') {\n          item = {\n            \"--\": item\n          };\n        } else {\n          item['index'] = index;\n        }\n\n        let r_data = self.__createObject(item, render_key);\n\n        self.setValue([cloneEl], r_data);\n        template.insertAdjacentHTML('beforebegin', cloneEl.outerHTML);\n      });\n    }\n  },\n  setValue: function (els, data, passTo, template) {\n    if (!data) return;\n    const that = this;\n    Array.from(els).forEach(e => {\n      let passId = e.getAttribute('data-pass_id');\n\n      if (passTo && passId != passTo) {\n        return;\n      }\n\n      Array.from(e.attributes).forEach(attr => {\n        let attr_name = attr.name.toLowerCase();\n        let isPass = false;\n        let attrValue = attr.value;\n        attrValue = that.__replaceValue(data, attrValue);\n\n        if (attrValue) {\n          if (attr_name == 'value') {\n            let tag = e.tagName.toLowerCase();\n\n            switch (tag) {\n              case 'input':\n                e.setAttribute(attr_name, attrValue);\n                break;\n\n              case 'textarea':\n                e.setAttribute(attr_name, attrValue);\n                e.textContent = attrValue;\n                break;\n\n              default:\n                if (e.children.length === 0) {\n                  e.innerHTML = attrValue;\n                }\n\n            }\n          }\n\n          e.setAttribute(attr_name, attrValue);\n        }\n      });\n\n      if (e.children.length == 0 && e.textContent) {\n        let textContent = e.textContent;\n        textContent = that.__replaceValue(data, textContent);\n\n        if (textContent) {\n          e.textContent = textContent;\n        }\n      }\n\n      if (e.children.length > 0) {\n        that.setValue(e.children, data);\n\n        if (e.classList.contains('template')) {\n          that.setArray(e, data);\n        }\n      }\n    });\n  },\n  data: function ({\n    selector,\n    data,\n    elements,\n    passTo\n  }) {\n    if (selector) {\n      this.render(selector, data);\n    } else if (elements) {\n      this.setValue(elements, data, passTo);\n    }\n  },\n  render: function (selector, dataResult) {\n    let template_div = document.querySelector(selector);\n\n    if (!template_div) {\n      return;\n    }\n\n    if (Array.isArray(dataResult)) {\n      template_div.setAttribute('data-render_array', 'test');\n      this.setValue([template_div], {\n        test: dataResult\n      });\n    } else {\n      this.setValue(template_div.children, dataResult);\n    }\n  }\n};\nvar _default = CoCreateRender;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5hcGkvLi4vQ29DcmVhdGUtcmVuZGVyL3NyYy9pbmRleC5qcz85ZDc1Il0sIm5hbWVzIjpbIkNvQ3JlYXRlUmVuZGVyIiwiX19nZXRWYWx1ZUZyb21PYmplY3QiLCJqc29uIiwicGF0aCIsImpzb25EYXRhIiwic3VicGF0aCIsInNwbGl0IiwiaSIsImxlbmd0aCIsImVycm9yIiwiY29uc29sZSIsImxvZyIsIl9fZ2V0VmFsdWUiLCJkYXRhIiwiYXR0clZhbHVlIiwicmVzdWx0IiwiZXhlYyIsInRyaW0iLCJfX2NyZWF0ZU9iamVjdCIsImtleXMiLCJuZXdPYmplY3QiLCJfX3JlcGxhY2VWYWx1ZSIsImlucHV0VmFsdWUiLCJpc1Bhc3MiLCJzZWxmIiwicmVzdWx0VmFsdWUiLCJ2YXJpYWJsZXMiLCJtYXRjaCIsImZvckVhY2giLCJhdHRyIiwidmFsdWUiLCJyZXBsYWNlIiwic2V0QXJyYXkiLCJ0ZW1wbGF0ZSIsInR5cGUiLCJnZXRBdHRyaWJ1dGUiLCJyZW5kZXJfa2V5IiwiYXJyYXlEYXRhIiwiQXJyYXkiLCJpc0FycmF5IiwiaXRlbSIsImluZGV4IiwiY2xvbmVFbCIsImNsb25lTm9kZSIsImNsYXNzTGlzdCIsInJlbW92ZSIsImFkZCIsInJfZGF0YSIsInNldFZhbHVlIiwiaW5zZXJ0QWRqYWNlbnRIVE1MIiwib3V0ZXJIVE1MIiwiZWxzIiwicGFzc1RvIiwidGhhdCIsImZyb20iLCJlIiwicGFzc0lkIiwiYXR0cmlidXRlcyIsImF0dHJfbmFtZSIsIm5hbWUiLCJ0b0xvd2VyQ2FzZSIsInRhZyIsInRhZ05hbWUiLCJzZXRBdHRyaWJ1dGUiLCJ0ZXh0Q29udGVudCIsImNoaWxkcmVuIiwiaW5uZXJIVE1MIiwiY29udGFpbnMiLCJzZWxlY3RvciIsImVsZW1lbnRzIiwicmVuZGVyIiwiZGF0YVJlc3VsdCIsInRlbXBsYXRlX2RpdiIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsInRlc3QiXSwibWFwcGluZ3MiOiI7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QUFDQSxLQUZELE1BRU8sSUFBSXdELFFBQUosRUFBYztBQUNwQixXQUFLckIsUUFBTCxDQUFjcUIsUUFBZCxFQUF3QnhELElBQXhCLEVBQThCdUMsTUFBOUI7QUFDQTtBQUNELEdBMUpxQjtBQTRKdEJrQixRQUFNLEVBQUcsVUFBU0YsUUFBVCxFQUFtQkcsVUFBbkIsRUFBK0I7QUFDdkMsUUFBSUMsWUFBWSxHQUFHQyxRQUFRLENBQUNDLGFBQVQsQ0FBdUJOLFFBQXZCLENBQW5COztBQUNBLFFBQUksQ0FBQ0ksWUFBTCxFQUFtQjtBQUNsQjtBQUNBOztBQUNELFFBQUlsQyxLQUFLLENBQUNDLE9BQU4sQ0FBY2dDLFVBQWQsQ0FBSixFQUErQjtBQUM5QkMsa0JBQVksQ0FBQ1QsWUFBYixDQUEwQixtQkFBMUIsRUFBK0MsTUFBL0M7QUFDQSxXQUFLZixRQUFMLENBQWMsQ0FBQ3dCLFlBQUQsQ0FBZCxFQUE4QjtBQUFDRyxZQUFJLEVBQUVKO0FBQVAsT0FBOUI7QUFDQSxLQUhELE1BR087QUFDTixXQUFLdkIsUUFBTCxDQUFjd0IsWUFBWSxDQUFDUCxRQUEzQixFQUFxQ00sVUFBckM7QUFDQTtBQUNEO0FBdktxQixDQUF2QjtlQTBLZXZFLGMiLCJmaWxlIjoiLi4vQ29DcmVhdGUtcmVuZGVyL3NyYy9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogY2hhbmdlIG5hbWUgQ2xhc3NcbiAqIGFkZCBmdW5jdGlvbmFsaXR5IHRvIGFkZCB2YWx1ZSBvbiBhbnkgYXR0ciBvZiBlYWNoIGVsZW1lbnRzIGludG8gdGVtcGxhdGVcbiAqL1xuY29uc3QgQ29DcmVhdGVSZW5kZXIgPSB7XG5cblx0X19nZXRWYWx1ZUZyb21PYmplY3QgOiBmdW5jdGlvbihqc29uLCBwYXRoKSB7XG5cdFx0dHJ5IHtcblx0XHRcdGlmKHR5cGVvZiBqc29uID09ICd1bmRlZmluZWQnIHx8ICFwYXRoKVxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRsZXQganNvbkRhdGEgPSBqc29uLCBzdWJwYXRoID0gcGF0aC5zcGxpdCgnLicpO1xuXHRcdFx0XG5cdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHN1YnBhdGgubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0anNvbkRhdGEgPSBqc29uRGF0YVtzdWJwYXRoW2ldXTtcblx0XHRcdFx0aWYgKCFqc29uRGF0YSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGpzb25EYXRhO1xuXHRcdH1jYXRjaChlcnJvcil7XG5cdFx0XHRjb25zb2xlLmxvZyhcIkVycm9yIGluIGdldFZhbHVlRnJvbU9iamVjdFwiLCBlcnJvcik7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHR9LFxuXHRcblx0X19nZXRWYWx1ZTogZnVuY3Rpb24oZGF0YSwgYXR0clZhbHVlKSB7XG5cdFx0bGV0IHJlc3VsdCA9IC97e1xccyooW1xcd1xcV10rKVxccyp9fS9nLmV4ZWMoYXR0clZhbHVlKTtcblx0XHRpZiAocmVzdWx0KSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5fX2dldFZhbHVlRnJvbU9iamVjdChkYXRhLCByZXN1bHRbMV0udHJpbSgpKTtcblx0XHR9XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFxuXHR9LFxuXHRcblx0X19jcmVhdGVPYmplY3Q6IGZ1bmN0aW9uIChkYXRhLCBwYXRoKSB7XG5cdFx0dHJ5IHtcblx0XHRcdGlmICghcGF0aCkgcmV0dXJuIGRhdGE7XG5cdFx0XHRcblx0XHRcdGxldCBrZXlzID0gcGF0aC5zcGxpdCgnLicpXG5cdFx0XHRsZXQgbmV3T2JqZWN0ID0gZGF0YTtcblxuXHRcdFx0Zm9yICh2YXIgIGkgPSBrZXlzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG5cdFx0XHRcdG5ld09iamVjdCA9IHtba2V5c1tpXV06IG5ld09iamVjdH1cdFx0XHRcdFxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG5ld09iamVjdDtcblx0XHRcdFxuXHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHRjb25zb2xlLmxvZyhcIkVycm9yIGluIGdldFZhbHVlRnJvbU9iamVjdFwiLCBlcnJvcik7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHR9LFxuXHRcblx0X19yZXBsYWNlVmFsdWU6IGZ1bmN0aW9uKGRhdGEsIGlucHV0VmFsdWUpIHtcblx0XHRsZXQgaXNQYXNzID0gZmFsc2U7XG5cdFx0bGV0IHNlbGYgPSB0aGlzO1xuXHRcdGxldCByZXN1bHRWYWx1ZSA9IG51bGw7XG5cdFx0Ly8gbGV0IHZhcmlhYmxlcyA9IGlucHV0VmFsdWUubWF0Y2goL3t7XFxzKihcXFMrKVxccyp9fS9nKTtcblx0XHRsZXQgdmFyaWFibGVzID0gaW5wdXRWYWx1ZS5tYXRjaCgve3soW0EtWmEtejAtOV8uLFxcLSBdKil9fS9nKTtcblx0XHRpZiAodmFyaWFibGVzKSB7XG5cdFx0XHR2YXJpYWJsZXMuZm9yRWFjaCgoYXR0cikgPT4ge1xuXHRcdFx0XHRsZXQgdmFsdWUgPSBzZWxmLl9fZ2V0VmFsdWUoZGF0YSwgYXR0cilcblx0XHRcdFx0aWYgKHZhbHVlICYmIHR5cGVvZih2YWx1ZSkgIT09IFwib2JqZWN0XCIpIHtcblx0XHRcdFx0XHRpc1Bhc3MgPSB0cnVlO1xuXHRcdFx0XHRcdGlucHV0VmFsdWUgPSBpbnB1dFZhbHVlLnJlcGxhY2UoYXR0ciwgdmFsdWUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KVxuXHRcdFx0XG5cdFx0XHRpZiAoaXNQYXNzKSB7XG5cdFx0XHRcdHJlc3VsdFZhbHVlID0gaW5wdXRWYWx1ZTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHJlc3VsdFZhbHVlO1xuXHR9LFxuXHRcblx0c2V0QXJyYXk6IGZ1bmN0aW9uKHRlbXBsYXRlLCBkYXRhKSB7XG5cdFx0Y29uc3QgdHlwZSA9IHRlbXBsYXRlLmdldEF0dHJpYnV0ZSgnZGF0YS1yZW5kZXJfYXJyYXknKSB8fCBcImRhdGFcIjtcblx0XHRjb25zdCByZW5kZXJfa2V5ID0gdGVtcGxhdGUuZ2V0QXR0cmlidXRlKCdkYXRhLXJlbmRlcl9rZXknKSB8fCB0eXBlO1xuXHRcdGNvbnN0IHNlbGYgPSB0aGlzO1xuXHRcdGNvbnN0IGFycmF5RGF0YSA9IHRoaXMuX19nZXRWYWx1ZUZyb21PYmplY3QoZGF0YSwgdHlwZSk7XG5cblx0XHRpZiAodHlwZSAmJiBBcnJheS5pc0FycmF5KGFycmF5RGF0YSkpIHtcblx0XHRcdGFycmF5RGF0YS5mb3JFYWNoKChpdGVtLCBpbmRleCkgPT4ge1xuXHRcdFx0XHRcblx0XHRcdFx0bGV0IGNsb25lRWwgPSB0ZW1wbGF0ZS5jbG9uZU5vZGUodHJ1ZSk7XG5cdFx0XHRcdGNsb25lRWwuY2xhc3NMaXN0LnJlbW92ZSgndGVtcGxhdGUnKTtcblx0XHRcdFx0Y2xvbmVFbC5jbGFzc0xpc3QuYWRkKCdjbG9uZV8nICsgdHlwZSk7XG5cdFx0XHRcdGlmICh0eXBlb2YgaXRlbSAhPT0gJ29iamVjdCcpIHtcblx0XHRcdFx0XHRpdGVtID0ge1wiLS1cIjogaXRlbX07XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0aXRlbVsnaW5kZXgnXSA9IGluZGV4O1xuXHRcdFx0XHR9XG5cdFx0XHRcdGxldCByX2RhdGEgPSBzZWxmLl9fY3JlYXRlT2JqZWN0KGl0ZW0sIHJlbmRlcl9rZXkpO1xuXG5cdFx0XHRcdHNlbGYuc2V0VmFsdWUoW2Nsb25lRWxdLCByX2RhdGEpO1xuXHRcdFx0XHR0ZW1wbGF0ZS5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZWJlZ2luJywgY2xvbmVFbC5vdXRlckhUTUwpO1xuXHRcdFx0fSlcblx0XHR9XG5cdH0sXG4gXG5cdHNldFZhbHVlOmZ1bmN0aW9uKGVscywgZGF0YSwgcGFzc1RvLCB0ZW1wbGF0ZSl7XG5cdFx0aWYgKCFkYXRhKSByZXR1cm47XG5cdFx0Y29uc3QgdGhhdCA9IHRoaXM7XG5cdFx0QXJyYXkuZnJvbShlbHMpLmZvckVhY2goZSA9PiB7XG5cdFx0XHRsZXQgcGFzc0lkID0gZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtcGFzc19pZCcpO1xuXHRcdFx0aWYgKHBhc3NUbyAmJiBwYXNzSWQgIT0gcGFzc1RvKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdEFycmF5LmZyb20oZS5hdHRyaWJ1dGVzKS5mb3JFYWNoKGF0dHI9Pntcblx0XHRcdFx0bGV0IGF0dHJfbmFtZSA9IGF0dHIubmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRsZXQgIGlzUGFzcyA9IGZhbHNlO1xuXHRcdFx0XHRsZXQgYXR0clZhbHVlID0gYXR0ci52YWx1ZTtcblx0XHRcdFx0YXR0clZhbHVlID0gdGhhdC5fX3JlcGxhY2VWYWx1ZShkYXRhLCBhdHRyVmFsdWUpO1xuXHRcdFx0XHRcblx0XHRcdFx0aWYgKGF0dHJWYWx1ZSkge1xuXHRcdFx0XHRcdGlmKGF0dHJfbmFtZSA9PSAndmFsdWUnKXtcblx0XHRcdFx0XHRcdGxldCB0YWcgPSBlLnRhZ05hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0XHRcdHN3aXRjaCAodGFnKSB7XG5cdFx0XHRcdFx0XHRcdGNhc2UgJ2lucHV0Jzpcblx0XHRcdFx0XHRcdFx0XHQgZS5zZXRBdHRyaWJ1dGUoYXR0cl9uYW1lLCBhdHRyVmFsdWUpO1xuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRjYXNlICd0ZXh0YXJlYSc6XG5cdFx0XHRcdFx0XHRcdFx0ZS5zZXRBdHRyaWJ1dGUoYXR0cl9uYW1lLCBhdHRyVmFsdWUpO1xuXHRcdFx0XHRcdFx0XHRcdGUudGV4dENvbnRlbnQgPSBhdHRyVmFsdWU7XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRcdFx0aWYgKGUuY2hpbGRyZW4ubGVuZ3RoID09PSAwKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRlLmlubmVySFRNTCA9ICBhdHRyVmFsdWU7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRlLnNldEF0dHJpYnV0ZShhdHRyX25hbWUsIGF0dHJWYWx1ZSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdFx0XG5cdFx0XHRpZiAoZS5jaGlsZHJlbi5sZW5ndGggPT0gMCAmJiBlLnRleHRDb250ZW50KSB7XG5cdFx0XHRcdGxldCB0ZXh0Q29udGVudCA9IGUudGV4dENvbnRlbnQ7XG5cdFx0XHRcdHRleHRDb250ZW50ID0gdGhhdC5fX3JlcGxhY2VWYWx1ZShkYXRhLCB0ZXh0Q29udGVudCk7XG5cdFx0XHRcdGlmICh0ZXh0Q29udGVudCkge1xuXHRcdFx0XHRcdGUudGV4dENvbnRlbnQgPSB0ZXh0Q29udGVudDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRcblx0XHRcdFxuXHRcdFx0aWYoZS5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdHRoYXQuc2V0VmFsdWUoZS5jaGlsZHJlbiwgZGF0YSlcblx0XHRcdFx0XG5cdFx0XHRcdGlmIChlLmNsYXNzTGlzdC5jb250YWlucygndGVtcGxhdGUnKSkge1xuXHRcdFx0XHRcdHRoYXQuc2V0QXJyYXkoZSwgZGF0YSk7XG5cdFx0XHRcdH0gXG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0sXG5cdFxuXHRkYXRhOiBmdW5jdGlvbih7c2VsZWN0b3IsIGRhdGEsIGVsZW1lbnRzLCBwYXNzVG99KSB7XG5cdFx0aWYgKHNlbGVjdG9yKSB7XG5cdFx0XHR0aGlzLnJlbmRlcihzZWxlY3RvciwgZGF0YSk7XG5cdFx0fSBlbHNlIGlmIChlbGVtZW50cykge1xuXHRcdFx0dGhpcy5zZXRWYWx1ZShlbGVtZW50cywgZGF0YSwgcGFzc1RvKTtcblx0XHR9XG5cdH0sXG5cdFxuXHRyZW5kZXIgOiBmdW5jdGlvbihzZWxlY3RvciwgZGF0YVJlc3VsdCkge1xuXHRcdGxldCB0ZW1wbGF0ZV9kaXYgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKVxuXHRcdGlmICghdGVtcGxhdGVfZGl2KSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGlmIChBcnJheS5pc0FycmF5KGRhdGFSZXN1bHQpKSB7XG5cdFx0XHR0ZW1wbGF0ZV9kaXYuc2V0QXR0cmlidXRlKCdkYXRhLXJlbmRlcl9hcnJheScsICd0ZXN0Jyk7XG5cdFx0XHR0aGlzLnNldFZhbHVlKFt0ZW1wbGF0ZV9kaXZdLCB7dGVzdDogZGF0YVJlc3VsdH0pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLnNldFZhbHVlKHRlbXBsYXRlX2Rpdi5jaGlsZHJlbiwgZGF0YVJlc3VsdCk7XG5cdFx0fVxuXHR9XG5cbn1cbmV4cG9ydCBkZWZhdWx0IENvQ3JlYXRlUmVuZGVyOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../CoCreate-render/src/index.js\n")},"../CoCreate-socket/src/index.js":(__unused_webpack_module,exports)=>{eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\nclass CoCreateSocket {\n  constructor(prefix = \"crud\") {\n    this.prefix = prefix || \"crud\";\n    this.sockets = new Map();\n    this.listeners = new Map();\n    this.messageQueue = new Map();\n    this.saveFileName = '';\n    this.globalScope = \"\";\n  }\n\n  setGlobalScope(scope) {\n    this.globalScope = `${this.prefix}/${scope}`;\n  }\n\n  getGlobalScope() {\n    return this.globalScope;\n  }\n  /**\n   * config: {namespace, room, host}\n   */\n\n\n  create(config) {\n    const {\n      namespace,\n      room\n    } = config;\n    const key = this.getKey(namespace, room);\n\n    let _this = this;\n\n    let socket;\n\n    if (this.sockets.get(key)) {\n      socket = this.sockets.get(key);\n      console.log('SOcket already has been register');\n      return;\n    }\n\n    let w_protocol = window.location.protocol;\n\n    if (window.location.protocol === \"about:\") {\n      w_protocol = window.parent.location.protocol;\n    }\n\n    let protocol = w_protocol === 'http:' ? 'ws' : 'wss';\n    const port = config.port ? config.port : 8088;\n    let socket_url = `${protocol}://${window.location.host}:${port}/${key}`;\n\n    if (config.host) {\n      if (config.host.includes(\"://\")) {\n        socket_url = `${config.host}/${key}`;\n      } else {\n        socket_url = `${protocol}://${config.host}:${port}/${key}`;\n      }\n    }\n\n    socket = new WebSocket(socket_url);\n\n    socket.onopen = function (event) {\n      console.log('created socket: ' + key);\n      const messages = _this.messageQueue.get(key) || [];\n      console.log(messages);\n      messages.forEach(msg => socket.send(JSON.stringify(msg)));\n\n      _this.sockets.set(key, socket);\n\n      _this.messageQueue.set(key, []);\n    };\n\n    socket.onclose = function (event) {\n      switch (event.code) {\n        case 1000:\n          // close normal\n          console.log(\"websocket: closed\");\n          break;\n\n        default:\n          _this.destroy(socket, key);\n\n          _this.reconnect(socket, config);\n\n          break;\n      }\n    };\n\n    socket.onerror = function (err) {\n      console.log('Socket error');\n\n      _this.destroy(socket, key);\n\n      _this.reconnect(socket, config);\n    };\n\n    socket.onmessage = function (data) {\n      try {\n        if (data.data instanceof Blob) {\n          _this.saveFile(data.data);\n\n          return;\n        }\n\n        let rev_data = JSON.parse(data.data);\n\n        if (rev_data.data.event) {\n          var event = new CustomEvent(rev_data.data.event, {\n            detail: rev_data.data\n          });\n          document.dispatchEvent(event);\n          return;\n        }\n\n        let action = rev_data.action;\n\n        const listeners = _this.listeners.get(rev_data.action);\n\n        if (!listeners) {\n          return;\n        }\n\n        listeners.forEach(listener => {\n          listener(rev_data.data, key);\n        });\n      } catch (e) {\n        console.log(e);\n      }\n    };\n  }\n  /**\n   * \n   */\n\n\n  send(action, data, room) {\n    const obj = {\n      action: action,\n      data: data\n    };\n    const key = this.getKeyByRoom(room);\n    const socket = this.getByRoom(room);\n\n    if (socket) {\n      socket.send(JSON.stringify(obj));\n    } else {\n      if (this.messageQueue.get(key)) {\n        this.messageQueue.get(key).push(obj);\n      } else {\n        this.messageQueue.set(key, [obj]);\n      }\n    }\n  }\n\n  sendFile(file, room) {\n    const socket = this.getByRoom(room);\n\n    if (socket) {\n      socket.send(file);\n    }\n  }\n  /**\n   * scope: ns/room\n   */\n\n\n  listen(type, callback) {\n    if (!this.listeners.get(type)) {\n      this.listeners.set(type, [callback]);\n    } else {\n      this.listeners.get(type).push(callback);\n    }\n  }\n\n  reconnect(socket, config) {\n    let _this = this;\n\n    setTimeout(function () {\n      _this.create(config);\n    }, 1000);\n  }\n\n  destroy(socket, key) {\n    if (socket) {\n      socket.onerror = socket.onopen = socket.onclose = null;\n      socket.close();\n      socket = null;\n    }\n\n    if (this.sockets.get(key)) {\n      this.sockets.delete(key);\n    }\n  }\n\n  getKey(namespace, room) {\n    let key = `${this.prefix}`;\n\n    if (namespace && namespace != '') {\n      if (room && room != '') {\n        key += `/${namespace}/${room}`;\n      } else {\n        key += `/${namespace}`;\n      }\n    }\n\n    return key;\n  }\n\n  getByRoom(room) {\n    let key = this.getKeyByRoom(room);\n    return this.sockets.get(key);\n  }\n\n  getKeyByRoom(room) {\n    let key = this.globalScope;\n\n    if (room) {\n      key = `${this.prefix}/${room}`;\n    }\n\n    return key;\n  }\n\n  saveFile(blob) {\n    // const {filename} = window.saveFileInfo;\n    const file_name = this.saveFileName || 'downloadFile';\n    var a = document.createElement(\"a\");\n    document.body.appendChild(a);\n    a.style = \"display: none\";\n    let url = window.URL.createObjectURL(blob);\n    a.href = url;\n    a.download = file_name;\n    a.click();\n    window.URL.revokeObjectURL(url);\n    this.saveFileName = '';\n  }\n\n  listenAsync(eventname) {\n    return new Promise(resolve => {\n      document.addEventListener(eventname, function (event) {\n        resolve(event.detail);\n      }, {\n        once: true\n      });\n    });\n  }\n\n}\n\nvar _default = CoCreateSocket;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../CoCreate-socket/src/index.js\n")}},__webpack_module_cache__={};function __webpack_require__(Q){var F=__webpack_module_cache__[Q];if(void 0!==F)return F.exports;var U=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q](U,U.exports,__webpack_require__),U.exports}var __webpack_exports__=__webpack_require__("./src/index.js");return __webpack_exports__=__webpack_exports__.default,__webpack_exports__})()}));